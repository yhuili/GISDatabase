
import java.sql.DriverManager;
import java.awt.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.util.*;
import oracle.sql.STRUCT;
import oracle.spatial.geometry.*;
/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
/**
 *
 * @author Hui Li
 */
public class hw2_HuiLi extends javax.swing.JFrame 
{
	// Variables declaration - do not modify//GEN-BEGIN:variables
	//declaration variables for the connection 
	private String host;
    private String port;
    private String dbname;
    private String username;
    private String password;
    //declaration variables for the UI 
    private javax.swing.ButtonGroup buttonGroup1;
    private ImageJPanel imageJPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextField jTextField1;   
    String sql1 = null, sqlprint = null, sql2 = null, sql3 = null, sql4 = null, sql5 = null, sql6 = null, sql7 = null, sql8 = null;
    //declaration variables for manipulating the dataset
    public static Connection con = null;
    public static PreparedStatement pst = null;
    public static Statement st = null;
    public static ResultSet rs = null;
    Graphics g = null;
    int peopleX;
    int peopleY;
    int APX;
    int APY;
    int radius;
    int pointQueryX;
    int pointQueryY;
    int findAPX;
    int findAPY;
    int queryNum = 1;
    int vertices;
    String ovalQuery;
    boolean rightClick = false;
    ArrayList<Integer> listX = new ArrayList<Integer>();
    ArrayList<Integer> listY = new ArrayList<Integer>();
    String rangeQuery;
    String findNAPQuery;
    String NAPQuery;
    int radius1;
    int radius2;
    String nQuery;
    int jRadioButton11 = 0;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Creates new form hw2_HuiLi
     */
    //constructor of hw2_HuiLi
    public hw2_HuiLi(String path) 
    {
        //Set up GUI
    	initComponents();
        getProperties(path);
        connectDB();
        System.out.println("set the canvas for drawing");
        g = jLabel1.getGraphics();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        imageJPanel1 = new ImageJPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HUI LI   ID:3194-8195-03");
        setResizable(false);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Current Coordinates(X,Y):");

        jTextField1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel1.setPreferredSize(new java.awt.Dimension(250, 100));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Active Feature Type");

        jCheckBox1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jCheckBox1.setText("Building");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jCheckBox3.setText("People");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jCheckBox2.setText("Access Point");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox3)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Query");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton1.setText("Whole Region");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton2.setText("Range Query");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton3.setText("Point Query");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRadioButton4.setText("Find AP covered People");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton2))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton4)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Your submitted query should be displayed here...");
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Submit Query");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        imageJPanel1.setMaximumSize(new java.awt.Dimension(820, 580));
        imageJPanel1.setMinimumSize(new java.awt.Dimension(820, 580));
        imageJPanel1.setPreferredSize(new java.awt.Dimension(820, 580));

        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel1MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout imageJPanel1Layout = new javax.swing.GroupLayout(imageJPanel1);
        imageJPanel1.setLayout(imageJPanel1Layout);
        imageJPanel1Layout.setHorizontalGroup(
            imageJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
            .addGroup(imageJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE))
        );
        imageJPanel1Layout.setVerticalGroup(
            imageJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(imageJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imageJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1046, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 129, Short.MAX_VALUE))
                    .addComponent(imageJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //get the properties from the file
    public void getProperties(String path) 
    {
        try {
            BufferedReader inFile = new BufferedReader(new FileReader(path));
            host = inFile.readLine();
            port = inFile.readLine();
            dbname = inFile.readLine();
            username = inFile.readLine();
            password = inFile.readLine();
        } catch (FileNotFoundException e) {
            System.out.println("cannot find the property file");
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //connect to Oracle database
    private void connectDB() 
    {
        //Set up connection for my database
        try {
        	String driver = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driver);
            System.out.println("connecting to database");
            String url = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbname;
            con = DriverManager.getConnection(url, username, password);
            System.out.println("connect to database successfully");
        } catch (SQLException se) {
            se.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //draw all the people on the map
    private void showPeople(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql3 = "SELECT p.pLocation FROM PEOPLE p ";
            rs = st.executeQuery(sql3);
            while (rs.next()) {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.GREEN);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql3);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the people");
        }
    }
    
    //draw all the ap on the map
    private void showAP(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql2 = "SELECT ap.apLocation, ap.apRadius FROM AP ap";
            rs = st.executeQuery(sql2);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("apLocation");
                JGeometry apLocation = JGeometry.load(dbObject);
                APX = (int) apLocation.getPoint()[0];
                APY = (int) apLocation.getPoint()[1];
                radius = rs.getInt("apRadius");
                g.setColor(Color.RED);
                g.fillRect(APX - 15 / 2, APY - 15 / 2, 15, 15);
                g.drawOval(APX - radius, APY - radius, radius * 2, radius * 2);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql2);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the access point");
        }
    }

    //draw all the building on the map
    private void showBuilding(Graphics g) 
    {

        try {
            st = con.createStatement();
            sql1 = "SELECT b.bShape, b.bVertices FROM BUILDING b";
            rs = st.executeQuery(sql1);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("bShape");
                JGeometry bShape = JGeometry.load(dbObject);
                vertices = rs.getInt("bVertices");
                int[] buildingX = new int[vertices];
                int[] buildingY = new int[vertices];
                for (int i = 0; i < vertices; i++) {
                    buildingX[i] = (int) bShape.getOrdinatesArray()[2 * i];
                    buildingY[i] = (int) bShape.getOrdinatesArray()[2 * i + 1];
                }
                g.setColor(Color.YELLOW);
                g.drawPolygon(buildingX, buildingY, vertices);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql1);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    //draw all the building in the polygon range
    private void showRangeBuilding(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql1 = "SELECT b.bShape, b.bVertices FROM BUILDING b WHERE sdo_relate(b.bShape," + rangeQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\'";
            rs = st.executeQuery(sql1);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("bShape");
                JGeometry bShape = JGeometry.load(dbObject);
                vertices = rs.getInt("bVertices");
                int[] buildingX = new int[vertices];
                int[] buildingY = new int[vertices];
                for (int i = 0; i < vertices; i++) {
                    buildingX[i] = (int) bShape.getOrdinatesArray()[2 * i];
                    buildingY[i] = (int) bShape.getOrdinatesArray()[2 * i + 1];
                }
                g.setColor(Color.YELLOW);
                g.drawPolygon(buildingX, buildingY, vertices);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql1);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    //draw all the people in the polygon range
    private void showRangePeople(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql3 = "SELECT p.pLocation FROM PEOPLE p WHERE sdo_relate(p.plocation," + rangeQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\'";

            rs = st.executeQuery(sql3);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.GREEN);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql3);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the range people");

        }
    }
    
    //draw all the ap in the polygon range
    private void showRangeAP(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql2 = "SELECT ap.apLocation FROM AP ap WHERE sdo_relate(ap.aplocation," + rangeQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\'";
            rs = st.executeQuery(sql2);
            while (rs.next()) {
                STRUCT dbObject = (STRUCT) rs.getObject("apLocation");
                JGeometry apLocation = JGeometry.load(dbObject);
                APX = (int) apLocation.getPoint()[0];
                APY = (int) apLocation.getPoint()[1];

                g.setColor(Color.RED);
                g.fillRect(APX - 15 / 2, APY - 15 / 2, 15, 15);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql2);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the access point");
        }
    }
    
    //draw all the building inside the circle
    private void showinsideBuilding(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql4 = "SELECT b.bShape, b.bVertices FROM BUILDING b WHERE sdo_relate(b.bShape," + ovalQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\'";
            rs = st.executeQuery(sql4);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("bShape");
                JGeometry bShape = JGeometry.load(dbObject);
                vertices = rs.getInt("bVertices");
                int[] buildingX = new int[vertices];
                int[] buildingY = new int[vertices];
                for (int i = 0; i < vertices; i++) {
                    buildingX[i] = (int) bShape.getOrdinatesArray()[2 * i];
                    buildingY[i] = (int) bShape.getOrdinatesArray()[2 * i + 1];
                }
                g.setColor(Color.GREEN);
                g.drawPolygon(buildingX, buildingY, vertices);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql4);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
        }

        try {
            st = con.createStatement();
            sql4 = "SELECT b.bShape, b.bVertices FROM BUILDING b WHERE sdo_relate(b.bShape," + ovalQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\' AND SDO_NN(b.bShape," + nQuery + ",\'sdo_num_res=1\')=\'TRUE\'";
            rs = st.executeQuery(sql4);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("bShape");
                JGeometry bShape = JGeometry.load(dbObject);
                vertices = rs.getInt("bVertices");
                int[] buildingX = new int[vertices];
                int[] buildingY = new int[vertices];
                for (int i = 0; i < vertices; i++) {
                    buildingX[i] = (int) bShape.getOrdinatesArray()[2 * i];
                    buildingY[i] = (int) bShape.getOrdinatesArray()[2 * i + 1];
                }
                g.setColor(Color.YELLOW);
                g.drawPolygon(buildingX, buildingY, vertices);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql4);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    //draw all the people inside the circle
    private void showinsidePeople(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql5 = "SELECT p.pLocation FROM PEOPLE p WHERE sdo_relate(p.pLocation," + ovalQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\'";
            rs = st.executeQuery(sql5);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.GREEN);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql5);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the inside people");

        }

        try {
            st = con.createStatement();
            sql5 = "SELECT p.pLocation FROM PEOPLE p WHERE sdo_relate(p.pLocation," + ovalQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\' AND SDO_NN(p.pLocation," + nQuery + ",\'sdo_num_res=1\')=\'TRUE\'";
            rs = st.executeQuery(sql5);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.YELLOW);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql5);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the nearest inside people");
        }
    }
    
    //draw all the ap inside the circle
    private void showinsideAP(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql6 = "SELECT ap.apLocation FROM AP ap WHERE sdo_relate(ap.aplocation," + ovalQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\'";
            rs = st.executeQuery(sql6);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("apLocation");
                JGeometry apLocation = JGeometry.load(dbObject);
                APX = (int) apLocation.getPoint()[0];
                APY = (int) apLocation.getPoint()[1];
                g.setColor(Color.GREEN);
                g.fillRect(APX - 15 / 2, APY - 15 / 2, 15, 15);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql6);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the inside access point");
        }

        try {
            st = con.createStatement();
            sql6 = "SELECT ap.apLocation FROM AP ap WHERE sdo_relate(ap.aplocation," + ovalQuery + ",\'MASK=inside+anyinteract\')=\'TRUE\' AND SDO_NN(ap.apLocation," + nQuery + ",\'sdo_num_res=1\')=\'TRUE\'";
            rs = st.executeQuery(sql6);
            
            while (rs.next()) 
            {
                
                STRUCT dbObject = (STRUCT) rs.getObject("apLocation");
                JGeometry apLocation = JGeometry.load(dbObject);
                APX = (int) apLocation.getPoint()[0];
                APY = (int) apLocation.getPoint()[1];
                g.setColor(Color.YELLOW);
                g.fillRect(APX - 15 / 2, APY - 15 / 2, 15, 15);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql6);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the inside access point");
        }
    }
    
    //draw the nearest access point
    private void find_AP(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql7 = "SELECT ap.apLocation,ap.apRadius FROM AP ap WHERE SDO_NN(ap.apLocation," + findNAPQuery + ",\'sdo_num_res=1\')=\'TRUE\'";
            rs = st.executeQuery(sql7);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("apLocation");
                JGeometry apLocation = JGeometry.load(dbObject);
                APX = (int) apLocation.getPoint()[0];
                APY = (int) apLocation.getPoint()[1];
                radius = rs.getInt("apRadius");
                g.setColor(Color.BLUE);
                g.fillRect(APX - 15 / 2, APY - 15 / 2, 15, 15);
                g.drawOval(APX - radius, APY - radius, radius * 2, radius * 2);
                NAPQuery = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + APX + "," + APY + ",NULL),NULL,NULL)";
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql7);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the nearest access point");
        }
    }
    
    //draw the lines from the access point to the people in the radius
    private void showLines(Graphics g) 
    {
        try {
            st = con.createStatement();
            sql8 = "SELECT p.pLocation FROM PEOPLE p WHERE SDO_WITHIN_DISTANCE(p.pLocation," + NAPQuery + ", 'distance = " + radius + "')='TRUE'";
            rs = st.executeQuery(sql8);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.YELLOW);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
                g.setColor(Color.YELLOW);
                g.drawLine(APX, APY, peopleX, peopleY);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql8);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the yellow line");
        }
        try {
            st = con.createStatement();
            radius1 = radius + 5;
            sql8 = "SELECT p.pLocation FROM PEOPLE p WHERE SDO_GEOM.SDO_DISTANCE(p.pLocation," + NAPQuery + ",0.005)< " + radius1 + " AND SDO_GEOM.SDO_DISTANCE(p.pLocation," + NAPQuery + ",0.005)> " + radius + "";
            rs = st.executeQuery(sql8);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.BLUE);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql8);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the blue line");
        }
        try {
            st = con.createStatement();
            radius2 = radius + 10;
            sql8 = "SELECT p.pLocation FROM PEOPLE p WHERE SDO_GEOM.SDO_DISTANCE(p.pLocation," + NAPQuery + ",0.005)< " + radius2 + " AND SDO_GEOM.SDO_DISTANCE(p.pLocation," + NAPQuery + ",0.005)> " + radius1 + "";
            rs = st.executeQuery(sql8);
            while (rs.next()) 
            {
                STRUCT dbObject = (STRUCT) rs.getObject("pLocation");
                JGeometry peopleLocation = JGeometry.load(dbObject);
                peopleX = (int) peopleLocation.getPoint()[0];
                peopleY = (int) peopleLocation.getPoint()[1];
                g.setColor(Color.CYAN);
                g.fillRect(peopleX - 10 / 2, peopleY - 10 / 2, 10, 10);
            }
            jTextArea1.append("\r\n" + "Query" + queryNum + ":" + sql8);
            queryNum++;
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("cannot display the cyan line");
        }
    }
    
    //show the polygon that drew by the user
    private void showPolygon(Graphics g) 
    {
        int[] X = new int[listX.size()];
        int[] Y = new int[listY.size()];
        for (int i = 0; i < listX.size(); i++) 
        {
            X[i] = listX.get(i);
            Y[i] = listY.get(i);
        }
        g.setColor(Color.red);
        g.drawPolygon(X, Y, listX.size());
    }
    
    //listener of the image, click on the map
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        if (jRadioButton2.isSelected() && rightClick == false) 
        {
            int a = evt.getX();
            int b = evt.getY();
            listX.add(evt.getX());
            listY.add(evt.getY());
            g.setColor(Color.RED);
            g.fillRect(a - 5 / 2, b - 5 / 2, 5, 5);
            if (listX.size() > 1) 
            {
                g.drawLine(listX.get(listX.size() - 2), listY.get(listY.size() - 2), listX.get(listX.size() - 1), listY.get(listY.size() - 1));
            }
        } else if (jRadioButton3.isSelected()) 
        {
            pointQueryX = evt.getX();
            pointQueryY = evt.getY();
            g.setColor(Color.RED);
            g.fillRect(pointQueryX - 5 / 2, pointQueryY - 5 / 2, 5, 5);
            g.drawOval(pointQueryX - 70, pointQueryY - 70, 70 * 2, 70 * 2);
            ovalQuery = "SDO_GEOMETRY(2003,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1003,4),SDO_ORDINATE_ARRAY(" + pointQueryX + "," + (pointQueryY + 70) + "," + (pointQueryX + 70) + "," + pointQueryY + "," + pointQueryX + "," + (pointQueryY - 70) + "))";
            nQuery = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + pointQueryX + "," + pointQueryY + ",NULL),NULL,NULL)";

        } else if (jRadioButton4.isSelected()) 
        {
            pointQueryX = evt.getX();
            pointQueryY = evt.getY();
            findNAPQuery = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + pointQueryX + "," + pointQueryY + ",NULL),NULL,NULL)";
            find_AP(g);

        }
    }//GEN-LAST:event_jLabel1MouseClicked
    
    //listener of the image, entered the map, get the mouse location on the map, and show the x, y coordinates on the text field
    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        String s1 = String.valueOf(x);
        String s2 = String.valueOf(y);
        jTextField1.setText("(" + s1 + ", " + s2 + ")");
    }//GEN-LAST:event_jLabel1MouseEntered
    
    //listener of the image, move on the map, get the mouse location on the map, and show the x, y coordinates on the text field   
    private void jLabel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseMoved
        // TODO add your handling code here:

        int x, y;
        x = evt.getX();
        y = evt.getY();
        String s1 = String.valueOf(x);
        String s2 = String.valueOf(y);
        jTextField1.setText("(" + s1 + ", " + s2 + ")");
    }//GEN-LAST:event_jLabel1MouseMoved

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:   
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) 
        {
            repaint();
            listX.clear();
            listY.clear();
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton2.isSelected()) 
        {
            repaint();
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton3.isSelected()) 
        {
            repaint();
            listX.clear();
            listY.clear();
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling cojRde here:
        if (jRadioButton4.isSelected()) 
        {
            imageJPanel1.update(g);
            showBuilding(g);
            showPeople(g);
            showAP(g);
            listX.clear();
            listY.clear();
        }
    }//GEN-LAST:event_jRadioButton4ActionPerformed
    
    //submit button
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:

        if (jRadioButton1.isSelected()) 
        {
            imageJPanel1.update(g); // refresh the map
            if (jCheckBox1.isSelected()) 
            {
                showBuilding(g);
            }
            if (jCheckBox2.isSelected()) 
            {
                showAP(g);
            }
            if (jCheckBox3.isSelected()) 
            {
                showPeople(g);
            }
        } else if (jRadioButton2.isSelected()) 
        {
            imageJPanel1.update(g);
            showPolygon(g);
            if (jCheckBox1.isSelected()) 
            {
                showRangeBuilding(g);
            }
            if (jCheckBox2.isSelected()) 
            {
                showRangeAP(g);
            }
            if (jCheckBox3.isSelected()) 
            {
                showRangePeople(g);
            }

            rightClick = false;

        } else if (jRadioButton3.isSelected()) 
        {
            imageJPanel1.update(g);
            g.setColor(Color.RED);
            g.fillRect(pointQueryX - 5 / 2, pointQueryY - 5 / 2, 5, 5);
            g.drawOval(pointQueryX - 70, pointQueryY - 70, 70 * 2, 70 * 2);
          
            if (jCheckBox1.isSelected()) 
            {
                showinsideBuilding(g);
            }
            if (jCheckBox2.isSelected()) 
            {
                showinsideAP(g);
            }
            if (jCheckBox3.isSelected()) 
            {
                showinsidePeople(g);
            }
        } else if (jRadioButton4.isSelected()) 
        {
            showLines(g);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        // TODO add your handling code here:

        if (jRadioButton2.isSelected() && evt.isPopupTrigger()) 
        {
            rightClick = true;
            g.drawLine(listX.get(listX.size() - 1), listY.get(listY.size() - 1), listX.get(0), listY.get(0));
            rangeQuery = "SDO_GEOMETRY(2003,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1003,1),SDO_ORDINATE_ARRAY(";
            for (int i = 0; i < listX.size(); i++) 
            {
                rangeQuery = rangeQuery + listX.get(i) + "," + listY.get(i);
                if (i < listX.size() - 1) 
                {
                    rangeQuery = rangeQuery + ",";
                }
            }
            rangeQuery = rangeQuery + "," + listX.get(0) + "," + listX.get(0) + "))";
        }


    }//GEN-LAST:event_jLabel1MouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) 
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw2_HuiLi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw2_HuiLi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw2_HuiLi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw2_HuiLi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        final String propertiesPath = args[0];
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new hw2_HuiLi(propertiesPath).setVisible(true);
            }
        });
    }
    
}
